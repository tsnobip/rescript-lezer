# Advanced declarations and switch

open Stdlib.Result

include Stdlib.List

external log: string => unit = "log"

type person<'a> = {name: string, data: 'a}

type color =
  | Red
  | Green

let makePerson = (~name, ~data=?, input) => {
  switch input {
  | Some(value) => Result.Ok(value)
  | None => Result.Error("unknown")
  }
}

makePerson(~name="Ada", ~data=?Some("ok"), ())

==>

Script(OpenStatement(open,ModulePath(ModulePrefix,ModuleName)),IncludeStatement(include,ModulePath(ModulePrefix,ModuleName)),ExternalDeclaration(external,VariableDefinition,":",FunctionType(TypeName,FunctionArrow("=>"),TypeName),"=",ExternalBody(String)),TypeDeclaration(type,TypeBinding(TypeName,TypeParams(TypeAngleLeftNode(CompareOp),TypeParam(TypeParameter(Quote("'"),VariableName)),TypeAngleRightNode(CompareOp)),"=",TypeBody(RecordType("{",RecordTypeField(PropertyDefinition,":",TypeName),",",RecordTypeField(PropertyDefinition,":",TypeParameter(Quote("'"),VariableName)),"}")))),TypeDeclaration(type,TypeBinding(TypeName,"=",TypeBody(VariantType("|",VariantConstructorCase(VariantConstructor),"|",VariantConstructorCase(VariantConstructor))))),LetBinding(let,LetValueBinding(VariableDefinition,"=",ArrowFunction(ParamList("(",ParamItems(LabeledParameterList(LabeledParameter("~",LabelName),",",LabeledParameter("~",LabelName,ParameterDefault("=","?")),",",SimpleParameter(VariableName))),")"),"=>",BlockExpression("{",SwitchExpression(switch,VariableName,"{",SwitchCase("|",Pattern(PatternPrimary(ConstructorPattern(VariantConstructor,PatternArguments("(",Pattern(PatternPrimary(VariableName)),")")))),"=>",CallExpression(MemberExpression(ModulePrefix,MemberLeaf(VariantConstructor)),"(",Argument(VariableName),")")),SwitchCase("|",Pattern(PatternPrimary(ConstructorPattern(VariantConstructor))),"=>",CallExpression(MemberExpression(ModulePrefix,MemberLeaf(VariantConstructor)),"(",Argument(String),")")),"}"),"}")))),CallExpression(VariableName,"(",Argument(LabeledArgument("~",LabelName,"=",ArgumentValue(String))),",",Argument(LabeledArgument("~",LabelName,"=",ArgumentValue("?",VariantLiteral(VariantConstructor,VariantArguments("(",String,")"))))),",",Argument(UnitLiteral(UnitToken)),")"))
