# Simple template string

let greeting = `Hello World`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent)))

# Template string with spaces

let message = `This is a test`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent)))

# Template string with special characters

let text = `Line 1
Line 2
Line 3`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent)))

# Empty template string

let empty = ``

==>

Script(LetBinding(let,VariableDefinition,TemplateString))

# Template string with quotes

let quoted = `He said "hello"`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent)))

# Template string in function call

console.log(`Debug message`)

==>

Script(CallExpression(MemberExpression(VariableName,PropertyName),TemplateString(TemplateContent)))

# Multiple template strings

let a = `first`
let b = `second`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent)),LetBinding(let,VariableDefinition,TemplateString(TemplateContent)))

# Template string with interpolation

let greeting = `Hello ${name}`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent,Interpolation(VariableName))))

# Template string with multiple interpolations

let message = `${firstName} ${lastName}`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(Interpolation(VariableName),TemplateContent,Interpolation(VariableName))))

# Template string with expression interpolation

let result = `The answer is ${x + y}`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent,Interpolation(BinaryExpression(VariableName,ArithOp,VariableName)))))

# Template string with function call interpolation

let output = `User: ${getUser()}`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent,Interpolation(CallExpression(VariableName)))))

# Template string with nested member access

let text = `Value: ${obj.prop.value}`

==>

Script(LetBinding(let,VariableDefinition,TemplateString(TemplateContent,Interpolation(MemberExpression(MemberExpression(VariableName,PropertyName),PropertyName)))))
